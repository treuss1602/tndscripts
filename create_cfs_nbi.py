#!/usr/bin/python3
import argparse
import json

from factoryproduct import FactoryProductConfiguration
from debug import DBG, set_debug_level

def create_confluence_table(cfsname, action, parameters, headers=True):
    if headers:
        print("h2. CFS PRODUCT_{}".format(cfsname))
        print("h3. {}".format(action))
    print("||Parameter name (without prefix)||Section||Description||Example Value||M/O/C||")
    print("|EXTERNAL_ORDER_ID|General|Reference to the order number. Generated by the northbound system.|O00324572912|M|")
    for param in parameters:
        print("|{}|Order Line|{}|{}|{}|".format(*param))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('-D', dest='dbglevel', action='store', default=0,    help='Print Debug information')
    parser.add_argument('-H', dest='headers', action='store_true',           help='Include headers (default if multiple files are given)')
    parser.add_argument('filename', metavar='<FILENAME>', nargs="*",         help='JSON input files')

    args=parser.parse_args()
    set_debug_level(args.dbglevel)

    paramlist = []
    paramlist = []
    cfsname = None
    for f in args.filename:
        DBG(10, "Reading json file '{}'".format(f))
        with open(f, "r") as fp:
            config = json.load(fp)
        if cfsname is None:
            cfsname = config["compositionName"]
        inputparams = [(p["from"], p["name"], fp["factoryProduct"]) for fp in config["paramMapping"] for p in fp["parameters"] if p["type"] == "input"]
        fps = {p[2] for p in inputparams}
        for fp in fps:
            fp_definition_filename = "{}_Create.json".format(fp)
            DBG(10, "Loading additional json file '{}'".format(fp_definition_filename))
            try:
                with open(fp_definition_filename, "r") as f:
                    config = FactoryProductConfiguration.from_file(f)
                for p in filter(lambda p: p[2] == fp, inputparams):
                    pdetails = config.find_input_param(p[1])
                    paramlist.append((p[0], pdetails.desc, pdetails.examplevalue, "M" if pdetails.mandatory else "O"))
            except Exception as e:
                print("WARNING: Unable to extract information for factory product {}. JSON File missing?".format(fp))
                raise(e)
    create_confluence_table(cfsname, "Create", paramlist)

